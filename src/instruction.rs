
pub enum Instruction {
    Aaload,
    Aastore,
    Aconst_null,
    Aload { index: u8 },
    Aload_0,
    Aload_1,
    Aload_2,
    Aload_3,
    Anewarray { indexbyte1: u8, indexbyte2: u8 },
    Areturn,
    Arraylength,
    Astore { index: u8 },
    Astore_0,
    Astore_1,
    Astore_2,
    Astore_3,
    Athrow,
    Baload,
    Bastore,
    Bipush { byte: u8 },
    Castore,
    Checkcast { indexbyte1: u8, indexbyte2: u8 },
    D2f,
    D2i,
    D2l,
    Dadd,
    Daload,
    Dastore,
    Dcmpg,
    Dcmpl,
    Dconst_0,
    Dconst_1,
    Ddiv,
    Dload { index: u8 },
    Dload_0,
    Dload_1,
    Dload_2,
    Dload_3,
    Dmul,
    Dneg,
    Drem,
    Dreturn,
    Dstore { index: u8 },
    Dstore_0,
    Dstore_1,
    Dstore_2,
    Dstore_3,
    Dsub,
    Dup,
    Dup_x1,
    Dup_x2,
    Dup2,
    Dup2_x1,
    Dup2_x2,
    F2d,
    F2i,
    F2l,
    Fadd,
    Faload,
    Fastore,
    Fcmpg,
    Fcmpl,
    Fconst_0,
    Fconst_1,
    Fconst_2,
    Fdiv,
    Fload { index: u8 },
    Fload_0,
    Fload_1,
    Fload_2,
    Fload_3,
    Fmul,
    Fneg,
    Frem,
    Freturn,
    Fstore { index: u8 },
    Fstore_0,
    Fstore_1,
    Fstore_2,
    Fstore_3,
    Fsub,
    Getfield { indexbyte1: u8, indexbyte2: u8 },
    Getstatic { indexbyte1: u8, indexbyte2: u8 },
    Goto { branchbyte1: u8, branchbyte2: u8 },
    Goto_w { branchbyte1: u8, branchbyte2: u8, branchbyte3: u8, branchbyte4: u8 },
    I2b,
    I2c,
    I2d,
    I2f,
    I2l,
    I2s,
    Iadd,
    Iaload,
    Iand,
    Iastore,
    Iconst_m1,
    Iconst_0,
    Iconst_1,
    Iconst_2,
    Iconst_3,
    Iconst_4,
    Iconst_5,
    Idiv,
    If_acmpeq { branchbyte1: u8, branchbyte2: u8 },
    If_acmpne { branchbyte1: u8, branchbyte2: u8 },
    If_icmpeq { branchbyte1: u8, branchbyte2: u8 },
    If_icmpne { branchbyte1: u8, branchbyte2: u8 },
    If_icmplt { branchbyte1: u8, branchbyte2: u8 },
    If_icmpge { branchbyte1: u8, branchbyte2: u8 },
    If_icmpgt { branchbyte1: u8, branchbyte2: u8 },
    If_icmple { branchbyte1: u8, branchbyte2: u8 },
    Ifeq { branchbyte1: u8, branchbyte2: u8 },
    Ifne { branchbyte1: u8, branchbyte2: u8 },
    Iflt { branchbyte1: u8, branchbyte2: u8 },
    Ifge { branchbyte1: u8, branchbyte2: u8 },
    Ifgt { branchbyte1: u8, branchbyte2: u8 },
    Ifle { branchbyte1: u8, branchbyte2: u8 },
    Ifnonnull { branchbyte1: u8, branchbyte2: u8 },
    Ifnull { branchbyte1: u8, branchbyte2: u8 },
    Iinc { index: u8, constant: u8 },
    Iload { index: u8 },
    Iload_0,
    Iload_1,
    Iload_2,
    Iload_3,
    Imul,
    Ineg,
    Instanceof { indexbyte1: u8, indexbyte2: u8 },
    Invokedynamic { indexbyte1: u8, indexbyte2: u8 },
    Invokeinterface { indexbyte1: u8, indexbyte2: u8, count: u8 },
    Invokespecial { indexbyte1: u8, indexbyte2: u8 },
    Invokestatic { indexbyte1: u8, indexbyte2: u8 },
    Invokevirtual { indexbyte1: u8, indexbyte2: u8 },
    Ior,
    Irem,
    Ireturn,
    Ishl,
    Ishr,
    Istore { index: u8 },
    Istore_0,
    Istore_1,
    Istore_2,
    Istore_3,
    Isub,
    Iushr,
    Ixor,
    Jsr { branchbyte1: u8, branchbyte2: u8 },
    Jsr_w { branchbyte1: u8, branchbyte2: u8, branchbyte3: u8, branchbyte4: u8 },
    L2d,
    L2f,
    L2i,
    Ladd,
    Laload,
    Land,
    Lastore,
    Lcmp,
    Lconst_0,
    Lconst_1,
    Ldc { index: u8 },
    Ldc_w { indexbyte1: u8, indexbyte2: u8 },
    Ldc2_w { indexbyte1: u8, indexbyte2: u8 },
    Ldiv,
    Lload,
    Lload_0,
    Lload_1,
    Lload_2,
    Lload_3,
    Lmul,
    Lneg,
    Lookupswitch {},
    Lor,
    Lrem,
    Lreturn,
    Lshl,
    Lshr,
    Lstore { index: u8 },
    Lstore_0,
    Lstore_1,
    Lstore_2,
    Lstore_3,
    Lsub,
    Lushr,
    Lxor,
    Monitorenter,
    Monitorexit,
    Multianewarray { indexbyte1: u8, indexbyte2: u8, dimensions: u8 },
    New { indexbyte1: u8, indexbyte2: u8 },
    Newarray { atype: u8 },
    Nop,
    Pop,
    Pop2,
    Putfield { indexbyte1: u8, indexbyte2: u8 },
    Putstatic { indexbyte1: u8, indexbyte2: u8 },
    Ret { index: u8 },
    Return,
    Saload,
    Sastore,
    Sipush { byte1: u8, byte2: u8 },
    Swap,
    Tableswitch {},
    Wide {}
}
